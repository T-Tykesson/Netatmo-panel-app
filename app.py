import folium
import jinja2
from jinja2 import Template

import panel as pn
import datetime
import logging
import numpy as np
import os
from bokeh.models import Div
from backend_handler import UserInputData, run_program
from back_end.api_counter import (InternalServerError,
                                  NetatmoGeneralError, NoActiveTokenError,
                                  NoApiCallsLeftError, InvalidInputError)
from bokeh.models import ColumnDataSource, WheelZoomTool
from bokeh.plotting import figure
from bokeh.tile_providers import get_provider, Vendors
from bokeh.models import ImageURL
import math
import base64
# Set the Panel extension
pn.extension('mathjax')

image_path = "images/icon.svg"
with open(image_path, "rb") as f:
    svg_data = f.read()
encoded_svg = base64.b64encode(svg_data).decode("utf-8")
svg_url = f"data:image/svg+xml;base64,{encoded_svg}"

def wgs84_to_web_mercator(lon, lat):
    k = 6378137
    x = lon * (k * math.pi / 180.0)
    y = math.log(math.tan((90 + lat) * math.pi / 360.0)) * k
    return x, y

def web_mercator_to_wgs84(x, y):
    k = 6378137
    lon = (x / k) * (180.0 / math.pi)
    lat = (y / k) * (180.0 / math.pi)
    lat = (2 * math.atan(math.exp(lat * (math.pi / 180.0))) - (math.pi / 2.0)) * (180.0 / math.pi)
    return lon, lat

# Add interaction
def update_plot(event):
    x, y = event.x, event.y
    source.data = dict(x=[x], y=[y])
    #image_source.data = dict(url=[url], x=[x], y=[y])
    lon, lat = web_mercator_to_wgs84(x, y)
    latitude_input.value = str(lat)
    longitude_input.value = str(lon)
    #print(f"Clicked location: {lon}, {lat}")

def load_display(x):
    if x == 'on':
        loading.value = True
        loading.visible = True
        loading.name = "H√§mtar stationer..."
    if x == 'off':
        loading.value = False
        loading.visible = False
        loading.name = ""
# Define the submit button and its callback

def show_modal(event):
    info_box = pn.pane.Markdown(markdown_text)
    ui.modal[0].clear()
    ui.modal[0].append(info_box)
    ui.open_modal()

def submit(event):
    error_message = ""
    load_display("on")
    try:
        error_div.text = ""
        auth_token = auth_input.value
        start_date = start_date_input.value.strftime('%Y-%m-%d')
        end_date = end_date_input.value.strftime('%Y-%m-%d')
        latitude = float(latitude_input.value)
        longitude = float(longitude_input.value)
        amount = int(amount_input.value)
        time_resolution = time_input.value

        print("auth_token=", auth_token,
              "latitude=", latitude,
              "longitude=", longitude,
              "date_begin=", start_date,
              "date_end=", end_date,
              "scale=", time_resolution,
              "station_amount=", amount)

        # Create UserInputData instance
        input_data = UserInputData(
            auth_token=auth_token,
            latitude=latitude,
            longitude=longitude,
            date_begin=start_date,
            date_end=end_date,
            scale=time_resolution,
            station_amount=amount,
            path=''
        )

    except (KeyError, ValueError) as e:
        error_message = f"Felaktig input, dubbelkolla att alla f√§lt √§r r√§tt inskrivna"
        print(e)
        error_div.text = f'<div style="color:red; border: 1px solid red; padding: 5px;">{error_message}</div>'
        load_display("off")
        return

    try:
        # Run the backend function
        output_file = run_program(input_data)

        file_download_button.file = output_file
        file_download_button.filename = os.path.basename(output_file)
        file_download_button.visible = True
    except KeyError as e:
        error_message = f"KeyError <br> {e}"
        print(error_message)

    except ValueError as e:
        error_message = f"Ospecificerat fel <br> Felmeddelande: {e}"
        print(e)

    except InternalServerError as e:
        error_message = "Internfel i Netatmos server, f√∂rs√∂k igen"
        print(error_message)

    except NetatmoGeneralError as e:
        error_message = f"Ospecificerat netatmofel: {e}"
        print(error_message)
        print(e)

    except NoActiveTokenError as e:
        error_message = "Tokennyckeln √§r felaktig eller har g√•tt ut, se till att nyckeln st√§mmer eller h√§mta en ny"
        print(error_message)

    except NoApiCallsLeftError as e:
        error_message = "Antal f√∂rfr√•gningar till servern har √∂verskridits, f√∂r att forst√§tta skaffa en ny tokennyckel fr√•n en annan app p√• Netatmo"
        print(error_message)

    except InvalidInputError as e:
        error_message = f"Felaktig input: {e}"
        print(str(e))
        
    except Exception as e:
        error_message = f"Ospecificerat fel <br> Felmeddelande: {e}"
        print(e)
    
    if error_message:
        load_display("off")
        error_div.text = f'<div style="color:red; border: 1px solid red; padding: 5px;">{error_message}</div>'
    else:
        error_div.text = ""
        load_display("off")
# Center the map around the specified coordinates
center_lon, center_lat = 11.974559999999997, 57.70887
x_center, y_center = wgs84_to_web_mercator(center_lon, center_lat)

# Create a Bokeh plot
p = figure(x_range=(x_center-50000, x_center+50000), y_range=(y_center-50000, y_center+50000),
           x_axis_type="mercator", y_axis_type="mercator", sizing_mode='stretch_width', tools="pan,wheel_zoom,reset", height=400, width=400)
source = ColumnDataSource(data=dict(x=[], y=[]))

#tile_provider = get_provider(Vendors.CARTODBPOSITRON)
tile_provider = get_provider(Vendors.OSM)
p.add_tile(tile_provider, retina="true")
p.axis.visible = False


p.circle(x='x', y='y', size=10, color='red', alpha=0.8, source=source)

#url = "https://upload.wikimedia.org/wikipedia/commons/e/ed/Map_pin_icon.svg"  # Example URL

# Add a ColumnDataSource for the image marker
#image_source = ColumnDataSource(data=dict(url=[url], x=[], y=[]))
#p.add_glyph(image_source, ImageURL(url="url", x="x", y="y", w=30, h=30, anchor="center"))

p.on_event('tap', update_plot)

# Enable wheel zoom tool and set it as the active scroll tool
wheel_zoom = WheelZoomTool()
p.add_tools(wheel_zoom)
p.toolbar.active_scroll = wheel_zoom
# Define form inputs
auth_input = pn.widgets.TextInput(name='Autentiseringnyckel', placeholder='', width=500)
auth_link = pn.pane.HTML('<a href="https://dev.netatmo.com/apps/" target="_blank">Autentiseringsnyckel kan h√§mtas h√§r</a>', sizing_mode='stretch_width')
info2 = pn.pane.HTML('Anv√§nd kartan f√∂r att v√§lja koordinater', sizing_mode='stretch_width')
end_date = datetime.date.today()
start_date = end_date - datetime.timedelta(days=30)

start_date_input = pn.widgets.DatePicker(name='Startdatum', value=start_date, start=datetime.date(2015, 12, 31))
end_date_input = pn.widgets.DatePicker(name='Slutdatum', value=end_date, start=datetime.date(2015, 12, 31))

latitude_input = pn.widgets.TextInput(name='Latitud', value='', width=300)
longitude_input = pn.widgets.TextInput(name='Longitud', value='', width=300)

amount_input = pn.widgets.IntInput(name='Antal stationer', value=1, step=1, start=1)
time_input = pn.widgets.Select(name='Uppl√∂sning', options=['30 min', '1 timme', '3 timmar', '1 dag', '1 vecka', '1 m√•nad'])

submit_button = pn.widgets.Button(name='H√§mta data', button_type='primary')
submit_button.on_click(submit)
error_div = Div(text="") # add margins
#error_div.text = "Fungerar detta" 
# Download button (initially invisible)
file_download_button = pn.widgets.FileDownload(
    auto=True, 
    button_type='success', 
    embed=False,
    visible=False
)

info_message = "0"
download_message = Div(text="") 

info_box = None # se till att detta √§r en f√∂rklaring till hur man laddar ner nyckeln
loading = pn.indicators.LoadingSpinner(value=False, width=50, height=50,visible=False)

info_button = pn.widgets.Button(name='üõà', width=15, margin=1, align=('start', 'center'), button_type="default", button_style='outline')
info_button.on_click(show_modal)

markdown_text = """## Appens  syfte

Appen h√§mtar √∂ppet tillg√§nglig regndata fr√•n Netatmo fr√•n deras regnm√§tare uppsatta av privatpersoner och skapar en excel fil med ett antal olika datavyer.

Appen fungerar genom att v√§lja en punkt p√• kartan och antal regnm√§tare att h√§mta, vilken uppl√∂sning datan ska ha och perioden d√• data ska h√§mtas. Programmet h√§mtar de X antal n√§rmaste m√§tarna runt den angivna punken, d√§r antal stationer v√§ljs av anv√§ndaren. 

## Tokennyckel
F√∂r att kunna h√§mta data automatiskt beh√∂ver man en ‚ÄùAccess token‚Äù, vilket √§r en kod f√∂r att kunna identifiera en anv√§ndare f√∂r webbplatsen. Nedan beskrivs hur man skapar en ‚ÄùAccess token‚Äù f√∂r Netatmo.

1.	G√• till https://dev.netatmo.com/apps/ 
2.	F√∂r att logga in p√• Netatmo ska f√∂ljande uppgifter anv√§ndas:

Konto: xxxx
L√∂sen: XXXXXXXXXX  

3.	Under ‚ÄùMy apps‚Äù klicka p√• appen ‚ÄùH√§mta regndata‚Äù.
4.	Scrolla ner tills du ser en rubrik som heter ‚ÄùToken generator‚Äù. I menyn v√§lj ‚Äùread_station‚Äù och klicka p√• ‚ÄùGenerate token‚Äù. Man beh√∂ver sen acceptera att det skapas en token, klicka ‚ÄùAccept‚Äù i f√∂nstret som dyker upp. 

Efter man accepterat kan man se ett f√§lt med ‚ÄùAccess token‚Äù som man kan kopiera och anv√§nda. Den √§r giltig i 3 timmar, sen beh√∂ver man g√• in och skapa en ny token via ‚ÄùToken generator‚Äù igen.  Klistra in nyckeln i f√§ltet ‚ÄùAutentiseringstoken‚Äù p√• originalsidan f√∂r att sen b√∂rja anv√§nda appen.

Ifall f√∂r m√•nga f√∂rfr√•gningar/h√§mtningar har gjorts fr√•n Netatmo m√•ste en ny nyckel anv√§ndas, d√• fr√•n en annan "app". V√§lj d√• appen "H√§mta regndata 2" och h√§mta nyckel med samma metod som innan. """
# Function to create the Panel app layout
def my_panel_app():
    logging.info("New session created")

    final_layout = pn.Column(pn.Row(
        pn.Column(
            pn.Row(auth_input, info_button),
            auth_link,
            pn.Row(start_date_input, end_date_input),
            pn.Row(latitude_input, longitude_input),
            info2,
            pn.Row(amount_input, time_input),
            download_message,
            pn.Row(submit_button),
            loading,
            error_div,
            width=700)
        , p, width=1400),
        file_download_button)
    ui.main.append(final_layout)
    ui.servable()

ui = pn.template.BootstrapTemplate(favicon="images/favicon2.png", 
                                   site="H√§mta regndata fr√•n Netatmo", title="")
ui.modal.append(pn.Column())
# Initialize and serve the Panel app
my_panel_app()
